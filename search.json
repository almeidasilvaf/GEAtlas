[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to bears","title":"Contributing to bears","text":"outlines propose change bears. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to bears","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to bears","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to bears","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"almeidasilvaf/bears\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to bears","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to bears","text":"Please note bears project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with bears","title":"Getting help with bears","text":"Thanks using bears! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with bears","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with bears","text":"Armed reprex, next step figure ask. See also Bioconductor help website. ’s question: start community.rstudio.com, /StackOverflow. Bioconductor-related question, please ask Bioconductor Support Website using appropriate package tag (website send automatic email package authors). people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with bears","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"/articles/bears_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"bears: building expression atlases in R","text":"past decades, exponential accumulation RNA-seq data public repositories. steep increase paved way creation gene expression atlases, consist comprehensive collections expression data public databases, analyzed single pipeline consistency cross-project comparison. bears package allows create gene expression atlas given species using public data. package features: Data download NCBI’s Sequence Read Archive (SRA) European Nucleotide Archive (ENA). Sequence quality check trimming low-quality sequences. Removal rRNA, typical problems libraries prepared rRNA depletion protocol. Read mapping reference genome. Transcript assembly. Quantification gene- transcript-level transcript abundance alignment-based alignment-free methods.","code":""},{"path":"/articles/bears_vignette.html","id":"installation-and-setup","dir":"Articles","previous_headings":"","what":"Installation and setup","title":"bears: building expression atlases in R","text":"install bears, use following code: , create standard directory structure create_dir_structure() store results. optional, make life much easier. output list paths common directories need specify several functions package. run full pipeline implemented bears, need external software tools installed machine. names tools listed . Functions column, can see names functions bears require tool. make life easier, created .yml files Conda environments containing external tools. vignette, manage external dependencies Bioconductor package Herper. use BiocStyle::Biocpkg(\"Herper\") : Install miniconda. vignette, install miniconda temporary directory, means miniconda automatically deleted R session closes. “already miniconda installed!” Great! case, just create object (e.g., my_miniconda) path miniconda installation. “Can permanent installation miniconda instead installing temporary directory?” sure. can specify path different directory object containing miniconda installation path. instance, can try my_miniconda <- \"~/Documents/miniconda\". Create different environment external tool. avoid conflicts, important keep tool environment. , tool installed environment named <tool-name-lowercase>_env (e.g., star_env, rseqc_env, salmon_env). Run R functions require external tools. run functions call external tools inside call Herper::withCondaEnv(). Herper function allows us run R function inside particular Conda environment, need specify. code install miniconda create tool-specific environments .yml files. Let’s see environments names.","code":"remotes::install_github(\"almeidasilvaf/bears\") library(bears)  # Create directory structure using a temporary directory as root ds <- create_dir_structure(rootdir = tempdir())  # Look at the output ds library(Herper)  # Path to directory where miniconda will be installed my_miniconda <- file.path(tempdir(), \"miniconda\")  # Path to .yml files to create environments envs <- list.files(     system.file(\"extdata\", package = \"bears\"), pattern = \".yml\",     full.names = TRUE )  # Install miniconda in `my_miniconda` and create envs create_envs <- sapply(envs, function(x) {     import_CondaEnv(x, pathToMiniConda = my_miniconda) }) list_CondaEnv(pathToMiniConda = my_miniconda) Sys.setenv(     PATH = paste(         Sys.getenv(\"PATH\"),         \"/opt/STAR-2.7.9a/bin/Linux_x86_64_static/\",         \"/opt/bin/\",         \"/opt/salmon-1.5.2_linux_x86_64/bin/\",         \"/opt/kallisto/\",         \"/opt/subread-2.0.3-Linux-x86_64/bin/\",         \"/opt/stringtie-2.1.7.Linux_x86_64/\",         \"/opt/taco-v0.7.3.Linux_x86_64/\",         sep = \":\"     ) )  Sys.getenv(\"PATH\") #> [1] \"/usr/lib/rstudio-server/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/STAR-2.7.9a/bin/Linux_x86_64_static/:/opt/bin/:/opt/salmon-1.5.2_linux_x86_64/bin/:/opt/kallisto/:/opt/subread-2.0.3-Linux-x86_64/bin/:/opt/stringtie-2.1.7.Linux_x86_64/:/opt/taco-v0.7.3.Linux_x86_64/\" library(bears)  # Test software installation fastp_is_installed() #> [1] FALSE star_is_installed() #> [1] FALSE sortmerna_is_installed() #> [1] TRUE rseqc_is_installed() #> [1] TRUE salmon_is_installed() #> [1] TRUE kallisto_is_installed() #> [1] TRUE subread_is_installed() #> [1] TRUE stringtie_is_installed() #> [1] TRUE taco_is_installed() #> [1] TRUE"},{"path":"/articles/bears_vignette.html","id":"retrieving-sample-metadata","dir":"Articles","previous_headings":"","what":"Retrieving sample metadata","title":"bears: building expression atlases in R","text":"First , need choose samples want download create metadata data frame samples. create data frame, pass search term function create_sample_info(). search term syntax SRA search term syntax. example, can search : BioSample accession - SAMN08903403[BSPL] BioProject accession - PRJNA229998[GPRJ] RNA-seq samples organism - Glycine max[ORGN] RNA-seq[STRA] … Let’s create metadata data frame human RNA-seq sample included airway Bioconductor package.","code":"# Create metadata data frame term <- \"SAMN02422669[BSPL]\" metadata <- create_sample_info(term) metadata"},{"path":"/articles/bears_vignette.html","id":"downloading-fastq-files","dir":"Articles","previous_headings":"","what":"Downloading FASTQ files","title":"bears: building expression atlases in R","text":"download .fastq files reads, 2 options: Using download_from_ena() (recommended), downloads reads ENA. function require external dependency much faster using SRAToolkit. Using download_fastq(), relies SRAToolkit download reads NCBI’s SRA. need SRAToolkit installed machine run function. function exists historical reasons (.e., people use SRAToolkit long time used ). try avoid SRAToolkit, slow easy set . input, need give metadata data frame path output directory .fastq files stored. example: ’s important check downloaded FASTQ files download issues might happen internet connection stable. function check_downloads() checks downloaded FASTQ files look one three issues : Issue 1: File downloaded. Issue 2: paired-end reads, forward reverse file downloaded. Issue 3: Less reads expected. look issue 3, check_downloads() needs know expected number reads run accession. number available SRA, can obtained function get_read_count(). example: can see, function returns data frame run accessions number reads reported SRA. information, can run check_downloads() look download problems. , can see, function reported issue 3 (less reads expected). using example FASTQ files come package, filtered package size issues.","code":"# Download sample to temporary directory options(timeout = 6000) download <- download_from_ena(metadata, fastqdir = ds$fastqdir)  # For running time issues, copy example FASTQ files to ds$fastqdir f <- list.files(system.file(\"extdata\", package = \"bears\"),                  pattern = \".fastq.gz\", full.names = TRUE) f copy <- file.copy(f, ds$fastqdir) # Get a data frame of run accessions and their read counts read_count <- get_read_count(metadata, run_accession = metadata$Run) read_count # Check downloaded files for issues check_downloads(metadata, fastqdir = ds$fastqdir, read_count)"},{"path":"/articles/bears_vignette.html","id":"read-qc-and-filtering","dir":"Articles","previous_headings":"","what":"Read QC and filtering","title":"bears: building expression atlases in R","text":"downloading .fastq files, need perform filtering steps remove low quality bases, adapters, rRNA. Read filtering consists 2 steps: trim_reads() - trim adapters low quality bases. function runs fastp (Chen et al. 2018) saves filtered .fastq files directory named filtdir. remove_rrna() - remove rRNA () .fastq files. rRNA removal relies SortMeRNA (Kopylova, Noé, Touzet 2012) program. First, let’s use trim_reads() filter reads. function trim_reads() stores .json files containing fastp summary statistics sample directory specified qcdir. can read parse data frame function summary_stats_fastp(). Let’s demonstrate works. real-world applications, rRNA database directory contain FASTA files distributed SortMeRNA GitHub repo. However, think files (e.g., 5s 5.8s rRNA) concern data set, don’t need include database. Now performed quality checks, ’re good go. 1","code":"if(fastp_is_installed()) {     # Trim reads     fastp_status <- trim_reads(         metadata,          fastqdir = ds$fastqdir,          filtdir = ds$filtdir,         qcdir = ds$qcdir     )          # Check run status     fastp_status } # Path to directory containing .json file from fastp qcdir <- system.file(\"extdata\", package = \"bears\") qc_table <- summary_stats_fastp(qcdir)  qc_table #>       Sample                         sequencing before_nreads before_nbases #> 1 SRR1039508 paired end (63 cycles + 63 cycles)         14194        894222 #>   before_q20bases before_q30bases before_q20rate before_q30rate #> 1          882850          866181       0.987283       0.968642 #>   before_GCcontent before_meanlength after_nreads after_nbases after_q20bases #> 1         0.486978                63        14076       886742         878073 #>   after_q30bases after_q20rate after_q30rate after_GCcontent after_meanlength #> 1         862056      0.990224      0.972161        0.486906               62 #>   filter_n_passed filter_n_lowquality filter_n_too_many_N filter_n_tooshort #> 1           14076                  84                  34                 0 #>   filter_n_toolong duplication_rate #> 1                0       0.00986332 # Create a directory to store the rRNA db rrna_db_dir <- file.path(tempdir(), \"rrna\") dir.create(rrna_db_dir)  # Copy the example 16S rRNA file to the db directory. rrna_file <- system.file(\"extdata\", \"bac_16s_subset.fa\", package=\"bears\") copy <- file.copy(from = rrna_file, to = rrna_db_dir)  # Run SortMeRNA from the Conda env with_CondaEnv(     \"sortmerna_env\",     rrna_removal <- remove_rrna(         metadata,         fastqdir = ds$fastqdir,         filtdir = ds$filtdir,         rrna_db_dir = rrna_db_dir     ),     pathToMiniConda = my_miniconda ) rrna_removal # check status"},{"path":"/articles/bears_vignette.html","id":"quantification-of-transcript-abundance","dir":"Articles","previous_headings":"","what":"Quantification of transcript abundance","title":"bears: building expression atlases in R","text":"Quantification transcript abundance can done two ways: Alignment-based approaches, involves mapping reads reference genome using STAR (Dobin et al. 2013) quantifying expression based uniquely mapped reads featureCounts (Liao, Smyth, Shi 2014) (raw counts) StringTie (Pertea et al. 2015) (TPM). Alignment-free approaches, involves pseudo-aligning quasi-mapping reads reference transcriptome kallisto (Bray et al. 2016) salmon (Patro et al. 2017), respectively. , describe perform approaches.","code":""},{"path":"/articles/bears_vignette.html","id":"alignment-based-quantification","dir":"Articles","previous_headings":"Quantification of transcript abundance","what":"Alignment-based quantification","title":"bears: building expression atlases in R","text":"start , need map reads reference genome. bears, reads mapped reference genome software tool STAR.","code":""},{"path":"/articles/bears_vignette.html","id":"read-mapping","dir":"Articles","previous_headings":"Quantification of transcript abundance > Alignment-based quantification","what":"Read mapping","title":"bears: building expression atlases in R","text":", purpose demonstration, map reads subset human genome. FASTA GTF files corresponding subset genome available /extdata. mapping reads, need create genome index. can done star_genome_index(). Now genome index, can map reads . Finally, let’s get read mapping statistics. Now, let’s check samples passed minimum quality criteria. , samples excluded : >=50% reads fail map ; >=40% reads fail uniquely map. function mapping_pass() takes metadata data frame returns data frame, samples passed minimum criteria. can see, sample used read mapping passed minimum quality criteria. Good, huh? can now proceed next step.","code":"# Get paths to genome subset genome_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.fa\",                              package=\"bears\") gff_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.gtf\",                           package=\"bears\")  # Create genome index with_CondaEnv(     \"star_env\",     genome_idx <- star_genome_index(         genome_path = genome_path,          gff_path = gff_path,          mappingdir = ds$mappingdir     ),     pathToMiniConda = my_miniconda ) genome_idx # check status # Map reads to the genome with_CondaEnv(     \"star_env\",     read_mapping <- star_align(         metadata,          filtdir = ds$filtdir,         qc_table = qc_table,         mappingdir = ds$mappingdir,         gff_path = gff_path     ),     pathToMiniConda = my_miniconda ) # Obtaining read mapping statistics with_CondaEnv(     \"multiqc_env\",     star_stats <- multiqc(         dir = ds$mappingdir,          outdir = tempdir(),         runon = \"star\"     ),     pathToMiniConda = my_miniconda ) star_stats # Check if samples passed the filtering criterion align_passed <- mapping_pass(star_stats, metadata) align_passed # inspect data  # Compare to the original data set nrow(metadata) nrow(align_passed)"},{"path":"/articles/bears_vignette.html","id":"inferring-library-strandedness","dir":"Articles","previous_headings":"Quantification of transcript abundance > Alignment-based quantification","what":"Inferring library strandedness","title":"bears: building expression atlases in R","text":"quantification, need infer library strandedness RSeQC (Wang, Wang, Li 2012) tool. function infer_strandedness() runs RSeQC returns metadata data frame additional column named Orientation containing library strandedness information. function requires annotation BED format, GTF/GFF. convert GTF/GFF BED, use function gff2bed(). can see, new Orientation column strandedness info sample.","code":"# Convert GFF to BED bedpath <- gff2bed(gff_path) bedpath # check status  # Infer strandedness with_CondaEnv(     \"rseqc_env\",     new_metadata <- infer_strandedness(         mapping_passed = align_passed,         bedpath = bedpath$bed_path,         mappingdir = ds$mappingdir     ),     pathToMiniConda = my_miniconda )  new_metadata"},{"path":"/articles/bears_vignette.html","id":"using-featurecounts","dir":"Articles","previous_headings":"Quantification of transcript abundance > Alignment-based quantification","what":"Using featureCounts","title":"bears: building expression atlases in R","text":"Now BAM files STAR information library strandedness sample, quantify expression featureCounts. tool quantifies gene expression measured raw read counts per gene. quantify gene expression featureCounts, use function fcount(). function runs featureCounts returns gene expression matrix genes rows samples columns. Whenever working gene expression data, recommend storing data SummarizedExperiment objects, expression matrix sample metadata single object. familiar SummarizedExperiment objects, take look documentation SummarizedExperiment package. get SummarizedExperiment object featureCounts, use function featureCounts2se().","code":"# Get gene expression in raw read counts with_CondaEnv(     \"subread_env\",     fcounts_quant <- fcount(         new_metadata,          mappingdir = ds$mappingdir,         gff_path = gff_path,         fcountsdir = ds$fcountsdir     ),     pathToMiniConda = my_miniconda )  # Explore gene expression matrix fcounts_quant # Create a SummarizedExperiment object from featureCounts output fcountsse <- featureCounts2se(     new_metadata, fc_output = fcounts_quant )  # Take a look at the SummarizedExperiment object fcountsse  # Exploring sample metadata SummarizedExperiment::colData(fcountsse)  # Exploring gene expression matrix SummarizedExperiment::assay(fcountsse)"},{"path":"/articles/bears_vignette.html","id":"using-stringtie","dir":"Articles","previous_headings":"Quantification of transcript abundance > Alignment-based quantification","what":"Using StringTie","title":"bears: building expression atlases in R","text":"StringTie quantifies transcript-level gene-level transcript abundances normalized values (transcripts per million, TPM). obtain gene expression levels TPM StringTie, use function stringtie_quantify(). Now, let’s read output StringTie SummarizedExperiment object function stringtie2se. can choose want expression gene level, transcript level, . , let’s get gene-level expression. , need give 2-column data frame transcript IDs corresponding genes.","code":"# Quantify expression in TPM with StringTie with_CondaEnv(     \"stringtie_env\",     stringtie_quant <- stringtie_quantify(         new_metadata,         qc_table = qc_table,         mappingdir = ds$mappingdir,         gff_path = gff_path,         stringtiedir = ds$stringtiedir     ),     pathToMiniConda = my_miniconda )  stringtie_quant # Check status # Load transcript-to-gene correspondence data(tx2gene) head(tx2gene)  # Read StringTie output as a SummarizedExperiment object stringtiese <- stringtie2se(     new_metadata,     stringtiedir = ds$stringtiedir,     level = \"gene\",     tx2gene = tx2gene )  # Exploring the SummarizedExperiment object stringtiese  # Looking at gene expression matrix SummarizedExperiment::assay(stringtiese, \"gene_TPM\")"},{"path":"/articles/bears_vignette.html","id":"bonus-transcript-assembly-and-merging","dir":"Articles","previous_headings":"Quantification of transcript abundance > Alignment-based quantification","what":"Bonus: Transcript assembly and merging","title":"bears: building expression atlases in R","text":"Besides quantifying transcript abundance, StringTie can also used assemble transcripts BioSample. Assembled transcripts BioSample represented .gtf files. However, want single .gtf file assembled transcripts BioSamples studying, can merge individual .gtf files StringTie software tool TACO (Niknafs et al. 2017). , demonstrate can achieved. vignette, single BioSample. However, real-life scenarios, several samples. merge .gtf files sample single .gtf file, use function taco_merge(). merged transcript assembly stored file named final_assembly.gtf subdirectory assembly/merged_assembly, inside stringtiedir. get path .gtf file, use: want assemble transcripts merge already .gtf file transcript annotations? ’s great question! way identify novel transcripts present reference .gtf file. transcripts can missing reference annotation (.gtf file) mainly : . genome assembly good quality, transcripts predicted. ii. false-positives transcript annotation software tool used. want comprehensive transcript abundance quantification, can assemble transcripts sample, merge , input output file final_assembly.gtf quantification functions. way, instead using reference transcript annotation, use transcript annotation, may contain novel transcripts.","code":"# Transcript assembly with StringTie with_CondaEnv(     \"stringtie_env\",     assembled_transcripts <- stringtie_assemble(         new_metadata,         qc_table = qc_table,         mappingdir = ds$mappingdir,         gff_path = gff_path,         stringtiedir = ds$stringtiedir     ),     pathToMiniConda = my_miniconda )  assembled_transcripts # check status # Merge assembled transcripts with TACO with_CondaEnv(     \"taco_env\",     merged_transcripts <- taco_merge(         new_metadata,         stringtiedir = ds$stringtiedir     ),     pathToMiniConda = my_miniconda )  merged_transcripts # check status # Get path to merged transcript assembly final_assembly <- file.path(     ds$stringtiedir, \"assembly\", \"merged_assembly\", \"final_assembly.gtf\" )  final_assembly"},{"path":"/articles/bears_vignette.html","id":"alignment-free-quantification","dir":"Articles","previous_headings":"Quantification of transcript abundance","what":"Alignment-free quantification","title":"bears: building expression atlases in R","text":"quantify expression without mapping reads genome, two options: Using kallisto, quantifies transcript abundance based pseudoalignments. Using salmon, quantifies transcript abundance based quasi-mapping. kallisto salmon, need reference transcriptome, reference genome. FASTA file containing sequences annotated transcripts genome. can easily create file function extractTranscriptSeqs() GenomicFeatures package.","code":""},{"path":"/articles/bears_vignette.html","id":"using-salmon","dir":"Articles","previous_headings":"Quantification of transcript abundance > Alignment-free quantification","what":"Using salmon","title":"bears: building expression atlases in R","text":"First , need index reference transcriptome function salmon_index(). Now, can quantify transcript abundance salmon_quantify(). running salmon_quantify(), salmon output .sf format stored directory specified salmondir. read salmon output SummarizedExperiment object, use function salmon2se(). can choose want expression gene level, transcript level, . , let’s get gene-level expression. , need give 2-column data frame transcript IDs corresponding genes.","code":"# Path to reference transcriptome transcriptome_path <- system.file(     \"extdata\", \"Homo_sapiens.GRCh37.75_subset_transcripts.fa.gz\",     package = \"bears\" )  # Index the transcriptome with_CondaEnv(     \"salmon_env\",     idx_salmon <- salmon_index(         salmonindex = ds$salmonindex,         transcriptome_path = transcriptome_path     ),     pathToMiniConda = my_miniconda )  idx_salmon # check status # Quantify transcript abundance with_CondaEnv(     \"salmon_env\",     quant_salmon <- salmon_quantify(         new_metadata,         filtdir = ds$filtdir,         salmonindex = ds$salmonindex,         salmondir = ds$salmondir     ),     pathToMiniConda = my_miniconda )  quant_salmon # check status # Load transcript-to-gene data frame data(tx2gene) head(tx2gene)  # Read salmon output as a SummarizedExperiment object salmonse <- salmon2se(     new_metadata,      level = \"gene\",      salmondir = ds$salmondir,     tx2gene )  # Exploring the output salmonse  # Get gene expression matrix in TPM SummarizedExperiment::assay(salmonse, \"gene_TPM\")  # Get gene expression matrix as raw counts SummarizedExperiment::assay(salmonse, \"gene_counts\")"},{"path":"/articles/bears_vignette.html","id":"using-kallisto","dir":"Articles","previous_headings":"Quantification of transcript abundance > Alignment-free quantification","what":"Using kallisto","title":"bears: building expression atlases in R","text":"Like salmon, start indexing transcriptome. Now, can quantify transcript abundance. read kallisto output SummarizedExperiment object, use function kallisto2se(). , specify want expressiona gene level, transcript level, . Let’s get gene expression .","code":"# Index the transcriptome with_CondaEnv(     \"kallisto_env\",     idx_kallisto <- kallisto_index(         kallistoindex = ds$kallistoindex,         transcriptome_path = transcriptome_path     ),     pathToMiniConda = my_miniconda )  idx_kallisto # check status # Quantify transcript abundance with_CondaEnv(     \"kallisto_env\",     quant_kallisto <- kallisto_quantify(         new_metadata,         qc_table,          filtdir = ds$filtdir,         kallistoindex = ds$kallistoindex,         kallistodir = ds$kallistodir     ),     pathToMiniConda = my_miniconda )  quant_kallisto # check status # Read kallisto output to SummarizedExperiment object kallistose <- kallisto2se(     new_metadata,      level = \"gene\",      kallistodir = ds$kallistodir,     tx2gene )  # Exploring the output kallistose  # Get gene expression matrix in TPM SummarizedExperiment::assay(kallistose, \"gene_TPM\")  # Get gene expression matrix as raw counts SummarizedExperiment::assay(kallistose, \"gene_counts\")"},{"path":"/articles/bears_vignette.html","id":"closing-remarks","dir":"Articles","previous_headings":"","what":"Closing remarks","title":"bears: building expression atlases in R","text":"using bears, two things must keep mind. First, package designed complete possible, means don’t need run complete pipeline project. instance, just want gene expression values TPM particular BioProject set BioProjects, can simply go salmon path pipeline, skipping read mapping section. Likewise, using bears data set already cleaned reads, can skip sequence quality checks read filtering sections. second thing consider bears work progress. Bioinformatics fast-evolving field, new (better) methods address particular question developed continuously. Hence, aim keep bears date state---art methods.","code":""},{"path":"/articles/bears_vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"bears: building expression atlases in R","text":"document created following sections:","code":"sessioninfo::session_info()"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabrício Almeida-Silva. Author, maintainer. Thiago Venancio. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Almeida-Silva F, Venancio T (2022). bears: Building Expression Atlas RNA-Seq data. R package version 0.99.0, https://github.com/almeidasilvaf/bears.","code":"@Manual{,   title = {bears: Building Expression Atlas from RNA-Seq data},   author = {Fabrício Almeida-Silva and Thiago Venancio},   year = {2022},   note = {R package version 0.99.0},   url = {https://github.com/almeidasilvaf/bears}, }"},{"path":"/index.html","id":"bears-","dir":"","previous_headings":"","what":"Building Expression Atlas from RNA-Seq data","title":"Building Expression Atlas from RNA-Seq data","text":"goal bears download RNA-seq data NCBI SRA, preprocess , map reference genome, quantify expression gene level. goal bears make RNA-seq data analysis pipelines reproducible, framework built state--art methods softwares.","code":""},{"path":"/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Building Expression Atlas from RNA-Seq data","text":"Get latest stable R release CRAN. install bears GitHub :","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) {     install.packages(\"remotes\") }  remotes::install_github(\"almeidasilvaf/bears\")"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Building Expression Atlas from RNA-Seq data","text":"Please note bears project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/check_md5.html","id":null,"dir":"Reference","previous_headings":"","what":"Check file integrity with md5sum — check_md5","title":"Check file integrity with md5sum — check_md5","text":"Check file integrity md5sum","code":""},{"path":"/reference/check_md5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check file integrity with md5sum — check_md5","text":"","code":"check_md5(run_accessions = NULL, fastqdir = \"results/01_FASTQ_files\")"},{"path":"/reference/check_md5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check file integrity with md5sum — check_md5","text":"run_accessions Character vector run accessions. fastqdir Path directory .fastq files stored. Default: results/01_FASTQ_files.","code":""},{"path":"/reference/check_md5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check file integrity with md5sum — check_md5","text":"data frame variables Run Status run accession integrity status, respectively.","code":""},{"path":"/reference/check_md5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check file integrity with md5sum — check_md5","text":"","code":"urls <- c(     \"ftp.sra.ebi.ac.uk/vol1/fastq/SRR926/SRR926397/SRR926397_1.fastq.gz\",     \"ftp.sra.ebi.ac.uk/vol1/fastq/SRR926/SRR926397/SRR926397_2.fastq.gz\" ) sample_info <- data.frame(     BioSample = \"SAMN01924555\",     Experiment = \"SRX245306\",     Run = \"SRR926397\",     BioProject = \"PRJNA190191\", Instrument = \"Illumina HiSeq 2000\",      Layout = \"PAIRED\" ) fastqdir <- tempdir() d <- download_from_ena(     sample_info, urls = urls, fastqdir = fastqdir, method = \"libcurl\" ) #> Downloading file ftp.sra.ebi.ac.uk/vol1/fastq/SRR926/SRR926397/SRR926397_1.fastq.gz #> Downloading file ftp.sra.ebi.ac.uk/vol1/fastq/SRR926/SRR926397/SRR926397_2.fastq.gz  # Check MD5 run_accessions <- sample_info$Run check_md5(run_accessions, fastqdir) #>         Run Status #> 1 SRR926397   TRUE"},{"path":"/reference/create_dir_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a standard directory for bears — create_dir_structure","title":"Create a standard directory for bears — create_dir_structure","text":"Create standard directory bears","code":""},{"path":"/reference/create_dir_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a standard directory for bears — create_dir_structure","text":"","code":"create_dir_structure(rootdir = NULL)"},{"path":"/reference/create_dir_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a standard directory for bears — create_dir_structure","text":"rootdir Root directory subdirectories created. specified, directory named \"results_YYYY-MM-DD\" created, Y, M D represent year, month day, respectively.","code":""},{"path":"/reference/create_dir_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a standard directory for bears — create_dir_structure","text":"list paths following elements: fastqdir Path directory FASTQ files . qcdir Path directory QC summary statistics stored. filtdir Path directory filtered FASTQ files . mappingdir Path directory STAR-derived BAM files . salmonindex Path directory salmon transcriptome index . salmondir Path directory salmon output files . kallistoindex Path directory kallisto transcriptome index . kallistodir Path directory kallisto output files . fcountsdir Path directory featureCounts output files . stringtiedir Path directory StringTie output files .","code":""},{"path":"/reference/create_dir_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a standard directory for bears — create_dir_structure","text":"","code":"rootdir <- tempdir() dirs <- create_dir_structure(rootdir)"},{"path":"/reference/create_sample_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the SRA database and create a data frame of sample metadata — create_sample_info","title":"Search the SRA database and create a data frame of sample metadata — create_sample_info","text":"Search SRA database create data frame sample metadata","code":""},{"path":"/reference/create_sample_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the SRA database and create a data frame of sample metadata — create_sample_info","text":"","code":"create_sample_info(term, retmax = 5000)"},{"path":"/reference/create_sample_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the SRA database and create a data frame of sample metadata — create_sample_info","text":"term Character search term, e.g. \"Glycine max[ORGN] RNA-seq[STRA]\". retmax Numeric maximum number hits returned search.","code":""},{"path":"/reference/create_sample_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the SRA database and create a data frame of sample metadata — create_sample_info","text":"data frame following columns: BioSample BioSample accession. Experiment Experiment accession (SRX*). Run Run accession (SRR*). Tissue Tissue RNA extracted. Pubmed Pubmed ID articles associated project, . BioProject Bioproject accession. Instrument Sequencing instrument Layout Library layout (single- paired-end sequencing). Selection_method Library selection method. SRA_sample SRA sample accession (SRS*). SRA_study SRA study accession (SRP*). Treatment Treatment biosample. Cultivar Plant cultivar. Study_title Study title, . Study_abstract Study abstract, . Date Date release. Origin Country origin.","code":""},{"path":"/reference/create_sample_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the SRA database and create a data frame of sample metadata — create_sample_info","text":"","code":"term <- \"SAMN02422669[BSPL]\" df <- create_sample_info(term)"},{"path":"/reference/download_from_ena.html","id":null,"dir":"Reference","previous_headings":"","what":"Download FASTQ files from ENA's FTP — download_from_ena","title":"Download FASTQ files from ENA's FTP — download_from_ena","text":"Download FASTQ files ENA's FTP","code":""},{"path":"/reference/download_from_ena.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download FASTQ files from ENA's FTP — download_from_ena","text":"","code":"download_from_ena(   sample_info = NULL,   urls = NULL,   fastqdir = \"results/01_FASTQ_files\",   method = \"auto\",   link_from = \"api\" )"},{"path":"/reference/download_from_ena.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download FASTQ files from ENA's FTP — download_from_ena","text":"sample_info Data frame sample metadata created function create_sample_info. urls Character vector returned get_url_ena() URLs file ENA's FTP repository. NULL, function run get_url_ena() get URLs downloading. fastqdir Path directory .fastq files stored. Default: results/01_FASTQ_files. method Method used downloading files. One \"internal\", \"libcurl\", \"wget\", \"libcurl\", \"curl\", \"wininet\" (Windows ), \"auto\". link_from Method extract URL FASTQ file ENA's ftp repository. One 'api' 'iterative'. Default: 'api'.","code":""},{"path":"/reference/download_from_ena.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download FASTQ files from ENA's FTP — download_from_ena","text":"data frame returned fastq_exists.","code":""},{"path":"/reference/download_from_ena.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download FASTQ files from ENA's FTP — download_from_ena","text":"","code":"data(sample_info) fastqdir <- tempdir() # \\donttest{ download_from_ena(sample_info, fastqdir = fastqdir) #> Downloading file ftp.sra.ebi.ac.uk/vol1/fastq/SRR103/008/SRR1039508/SRR1039508_1.fastq.gz #> Downloading file ftp.sra.ebi.ac.uk/vol1/fastq/SRR103/008/SRR1039508/SRR1039508_2.fastq.gz #>          Run Status #> 1 SRR1039508     OK # }"},{"path":"/reference/fastp_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if fastp is installed — fastp_is_installed","title":"Check if fastp is installed — fastp_is_installed","text":"Check fastp installed","code":""},{"path":"/reference/fastp_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if fastp is installed — fastp_is_installed","text":"","code":"fastp_is_installed()"},{"path":"/reference/fastp_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if fastp is installed — fastp_is_installed","text":"Logical indicating whether fastp installed .","code":""},{"path":"/reference/fastp_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if fastp is installed — fastp_is_installed","text":"","code":"fastp_is_installed() #> [1] FALSE"},{"path":"/reference/fastq_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if FASTQ files were properly downloaded — fastq_exists","title":"Check if FASTQ files were properly downloaded — fastq_exists","text":"Check FASTQ files properly downloaded","code":""},{"path":"/reference/fastq_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if FASTQ files were properly downloaded — fastq_exists","text":"","code":"fastq_exists(   sample_info = NULL,   fastqdir = \"results/01_FASTQ_files\",   collapse_pe = TRUE )"},{"path":"/reference/fastq_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if FASTQ files were properly downloaded — fastq_exists","text":"sample_info Data frame sample metadata created function create_sample_info. fastqdir Path directory .fastq files stored. Default: results/01_FASTQ_files. collapse_pe Logical scalar indicating whether collapse paired-end files runs single run. TRUE (default), files like SRR12345_1.fastq.gz SRR12345_2.fastq.gz collapsed SRR12345.","code":""},{"path":"/reference/fastq_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if FASTQ files were properly downloaded — fastq_exists","text":"Data frame run accession first column, status second column. FASTQ file given run exists, status \"OK\", otherwise NA.","code":""},{"path":"/reference/fastq_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if FASTQ files were properly downloaded — fastq_exists","text":"","code":"data(sample_info) fastqdir <- system.file(\"extdata\", package = \"bears\") fastq_exists(sample_info, fastqdir) #>          Run Status #> 1 SRR1039508     OK fastq_exists(sample_info, fastqdir, collapse_pe = FALSE) #>            Run Status #> 1 SRR1039508_1     OK #> 2 SRR1039508_2     OK"},{"path":"/reference/fcount.html","id":null,"dir":"Reference","previous_headings":"","what":"Count reads with featureCounts — fcount","title":"Count reads with featureCounts — fcount","text":"Count reads featureCounts","code":""},{"path":"/reference/fcount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count reads with featureCounts — fcount","text":"","code":"fcount(   sample_info = NULL,   mappingdir = \"results/04_read_mapping\",   gff_path = NULL,   fcountsdir = \"results/05_quantification/featureCounts\",   threads = 2 )"},{"path":"/reference/fcount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count reads with featureCounts — fcount","text":"sample_info Data frame sample metadata created functions create_sample_info infer_strandedness. mappingdir Directory .bam files stored. gff_path Path GFF/GTF file annotations. fcountsdir Directory matrix gene-level read counts stored. threads Number threads featureCounts. Default: 2.","code":""},{"path":"/reference/fcount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count reads with featureCounts — fcount","text":"gene expression matrix genes row names samples column names. Two .tsv files gene expression matrix count stats saved fcountsdir.","code":""},{"path":"/reference/fcount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count reads with featureCounts — fcount","text":"","code":"data(sample_info) mappingdir <- system.file(\"extdata\", package=\"bears\") gff_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.gtf\",                         package=\"bears\") fcountsdir <- tempdir() if(subread_is_installed()) {     counts <- fcount(sample_info, mappingdir, gff_path, fcountsdir) }"},{"path":"/reference/featureCounts2se.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SummarizedExperiment object from featureCounts output — featureCounts2se","title":"Create a SummarizedExperiment object from featureCounts output — featureCounts2se","text":"Create SummarizedExperiment object featureCounts output","code":""},{"path":"/reference/featureCounts2se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SummarizedExperiment object from featureCounts output — featureCounts2se","text":"","code":"featureCounts2se(sample_info = NULL, fc_output = NULL)"},{"path":"/reference/featureCounts2se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SummarizedExperiment object from featureCounts output — featureCounts2se","text":"sample_info Data frame sample metadata created functions create_sample_info. fc_output Either gene expression matrix generated fcount, path .tsv file containing gene expression matrix generated fcount.","code":""},{"path":"/reference/featureCounts2se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SummarizedExperiment object from featureCounts output — featureCounts2se","text":"SummarizedExperiment object.","code":""},{"path":"/reference/featureCounts2se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SummarizedExperiment object from featureCounts output — featureCounts2se","text":"","code":"data(sample_info) mappingdir <- system.file(\"extdata\", package=\"bears\") gff_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.gtf\",                         package=\"bears\") fcountsdir <- tempdir() if(subread_is_installed()) {     counts <- fcount(sample_info, mappingdir, gff_path, fcountsdir)     se <- featureCounts2se(sample_info, counts) }"},{"path":"/reference/get_url_ena.html","id":null,"dir":"Reference","previous_headings":"","what":"Get URL for each file in the ENA's FTP repository — get_url_ena","title":"Get URL for each file in the ENA's FTP repository — get_url_ena","text":"Get URL file ENA's FTP repository","code":""},{"path":"/reference/get_url_ena.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get URL for each file in the ENA's FTP repository — get_url_ena","text":"","code":"get_url_ena(sample_info = NULL, link_from = \"api\")"},{"path":"/reference/get_url_ena.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get URL for each file in the ENA's FTP repository — get_url_ena","text":"sample_info Data frame sample metadata created function create_sample_info. link_from Method extract URL FASTQ file ENA's ftp repository. One 'api' 'iterative'. Default: 'api'.","code":""},{"path":"/reference/get_url_ena.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get URL for each file in the ENA's FTP repository — get_url_ena","text":"character vector URL accession.","code":""},{"path":"/reference/get_url_ena.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get URL for each file in the ENA's FTP repository — get_url_ena","text":"","code":"data(sample_info) get_url_ena(sample_info) #> [1] \"ftp.sra.ebi.ac.uk/vol1/fastq/SRR103/008/SRR1039508/SRR1039508_1.fastq.gz\" #> [2] \"ftp.sra.ebi.ac.uk/vol1/fastq/SRR103/008/SRR1039508/SRR1039508_2.fastq.gz\""},{"path":"/reference/gff2bed.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GFF file to BED — gff2bed","title":"Convert GFF file to BED — gff2bed","text":"Convert GFF file BED","code":""},{"path":"/reference/gff2bed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GFF file to BED — gff2bed","text":"","code":"gff2bed(gffpath = NULL)"},{"path":"/reference/gff2bed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GFF file to BED — gff2bed","text":"gffpath Path .gff file genome annotation.","code":""},{"path":"/reference/gff2bed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GFF file to BED — gff2bed","text":"Path output .bed file","code":""},{"path":"/reference/gff2bed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GFF file to BED — gff2bed","text":"","code":"gff_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.gtf\",                           package=\"bears\") gffdir <- tempdir() file.copy(from = gff_path, to=gffdir) #> [1] TRUE gff_file <- list.files(gffdir, full.names=TRUE, pattern=\".gtf\") gff2bed(gff_file) #> [1] \"/tmp/RtmpoCyzVZ/Homo_sapiens.GRCh37.75_subset.bed\""},{"path":"/reference/infer_strandedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer library strandedness — infer_strandedness","title":"Infer library strandedness — infer_strandedness","text":"Infer library strandedness","code":""},{"path":"/reference/infer_strandedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer library strandedness — infer_strandedness","text":"","code":"infer_strandedness(   mapping_passed = NULL,   bedpath = NULL,   mappingdir = \"results/04_read_mapping\",   sample_n = 4e+05 )"},{"path":"/reference/infer_strandedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer library strandedness — infer_strandedness","text":"mapping_passed Metadata samples passed mapping QC. can obtained mapping_pass. bedpath Path BED file. GFF files can converted BED gff2bed. mappingdir Directory .bam files stored. sample_n Numeric indicating number reads sample .bam file infer strandedness. Default: 400000.","code":""},{"path":"/reference/infer_strandedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer library strandedness — infer_strandedness","text":"data frame sample metadata mapping_passed, additional column named 'Orientation' containing library strandedness BioProject.","code":""},{"path":"/reference/infer_strandedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer library strandedness — infer_strandedness","text":"","code":"data(sample_info) mapping_passed <- sample_info[, -grep(\"Orientation\", names(sample_info))] bedpath <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.bed\",                          package=\"bears\") mappingdir <- system.file(\"extdata\", package = \"bears\") if(rseqc_is_installed()) {     s <- infer_strandedness(mapping_passed, bedpath, mappingdir) }"},{"path":"/reference/kallisto2se.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SummarizedExperiment object from kallisto output — kallisto2se","title":"Create a SummarizedExperiment object from kallisto output — kallisto2se","text":"Create SummarizedExperiment object kallisto output","code":""},{"path":"/reference/kallisto2se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SummarizedExperiment object from kallisto output — kallisto2se","text":"","code":"kallisto2se(   sample_info = NULL,   level = \"gene\",   kallistodir = \"results/05_quantification/kallisto\",   tx2gene = NULL )"},{"path":"/reference/kallisto2se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SummarizedExperiment object from kallisto output — kallisto2se","text":"sample_info Data frame sample metadata created functions create_sample_info level Character indicating level expression must quantified SE object. One \"gene\" (default), \"transcript\", \"\". \"\", SE object two assays named \"transcript\" \"gene\". kallistodir Directory quantification files stored. Default: results/05_quantification/kallisto. tx2gene Data frame correspondence genes transcripts, gene IDs first column transcript IDs second column. required level = 'gene' ''.","code":""},{"path":"/reference/kallisto2se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SummarizedExperiment object from kallisto output — kallisto2se","text":"SummarizedExperiment object gene/transcript expression levels sample metadata.","code":""},{"path":"/reference/kallisto2se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SummarizedExperiment object from kallisto output — kallisto2se","text":"","code":"data(sample_info) data(tx2gene) kallistodir <- system.file(\"extdata\", package=\"bears\") se_gene <- kallisto2se(sample_info, kallistodir = kallistodir,                         tx2gene = tx2gene) #> Note: importing `abundance.h5` is typically faster than `abundance.tsv` #> reading in files with read.delim (install 'readr' package for speed up) #> 1  #>  #> summarizing abundance #> summarizing counts #> summarizing length"},{"path":"/reference/kallisto_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Index the transcriptome for kallisto — kallisto_index","title":"Index the transcriptome for kallisto — kallisto_index","text":"Index transcriptome kallisto","code":""},{"path":"/reference/kallisto_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index the transcriptome for kallisto — kallisto_index","text":"","code":"kallisto_index(   kallistoindex = \"results/05_quantification/kallisto/idx\",   transcriptome_path = NULL )"},{"path":"/reference/kallisto_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index the transcriptome for kallisto — kallisto_index","text":"kallistoindex Directory kallisto index file stored. Default: results/05_quantification/kallisto/idx. transcriptome_path Path reference transcriptome FASTA file.","code":""},{"path":"/reference/kallisto_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index the transcriptome for kallisto — kallisto_index","text":"2-column data frame path index file first column index build status second column, \"OK\" transcriptome index successfully created, NA otherwise.","code":""},{"path":"/reference/kallisto_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index the transcriptome for kallisto — kallisto_index","text":"","code":"kallistoindex <- file.path(tempdir(), \"idx\") transcriptome_path <- system.file(      \"extdata\", \"Hsapiens_GRCh37.75_subset_transcripts.fa\", package=\"bears\" ) if(kallisto_is_installed()) {     kallisto_index(kallistoindex, transcriptome_path) }"},{"path":"/reference/kallisto_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if kallisto is installed — kallisto_is_installed","title":"Check if kallisto is installed — kallisto_is_installed","text":"Check kallisto installed","code":""},{"path":"/reference/kallisto_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if kallisto is installed — kallisto_is_installed","text":"","code":"kallisto_is_installed()"},{"path":"/reference/kallisto_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if kallisto is installed — kallisto_is_installed","text":"Logical indicating whether kallisto installed ","code":""},{"path":"/reference/kallisto_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if kallisto is installed — kallisto_is_installed","text":"","code":"kallisto_is_installed() #> [1] FALSE"},{"path":"/reference/kallisto_quantify.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantify expression with kallisto — kallisto_quantify","title":"Quantify expression with kallisto — kallisto_quantify","text":"Quantify expression kallisto","code":""},{"path":"/reference/kallisto_quantify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantify expression with kallisto — kallisto_quantify","text":"","code":"kallisto_quantify(   sample_info = NULL,   qc_table = NULL,   filtdir = \"results/03_filtered_FASTQ\",   kallistoindex = \"results/05_quantification/kallisto/idx\",   kallistodir = \"results/05_quantification/kallisto\",   threads = NULL )"},{"path":"/reference/kallisto_quantify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantify expression with kallisto — kallisto_quantify","text":"sample_info Data frame sample metadata created functions create_sample_info infer_strandedness. function infer_strandedness adds column named \"Orientation\" library strandedness information, mandatory kallisto quantification. qc_table Data frame fastp summary statistics returned summary_stats_fastp(). filtdir Path directory filtered reads stored. Default: results/03_filtered_FASTQ. kallistoindex Directory kallisto index file stored. Default: results/05_quantification/kallisto/idx. kallistodir Directory quantification files stored. Default: results/05_quantification/kallisto. threads Number threads kallisto quant.","code":""},{"path":"/reference/kallisto_quantify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantify expression with kallisto — kallisto_quantify","text":"2-column data frame BioSample IDs first column quantification status second column, \"OK\" kallisto successfully quantified expression given BioSample, NA otherwise.","code":""},{"path":"/reference/kallisto_quantify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantify expression with kallisto — kallisto_quantify","text":"","code":"data(sample_info) qc_table <- summary_stats_fastp(system.file(\"extdata\", package = \"bears\"))  filtdir <- system.file(\"extdata\", package = \"bears\") kallistoindex <- file.path(tempdir(), \"transcripts.idx\") kallistodir <- tempdir() transcriptome_path <- system.file(      \"extdata\", \"Hsapiens_GRCh37.75_subset_transcripts.fa\", package=\"bears\" ) if(kallisto_is_installed()) {     kallisto_index(kallistoindex, transcriptome_path)     kallisto_quantify(         sample_info, qc_table, filtdir, kallistoindex, kallistodir     ) }"},{"path":"/reference/mapping_pass.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep only samples that passed minimum requirements in STAR alignment — mapping_pass","title":"Keep only samples that passed minimum requirements in STAR alignment — mapping_pass","text":"Keep samples passed minimum requirements STAR alignment","code":""},{"path":"/reference/mapping_pass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep only samples that passed minimum requirements in STAR alignment — mapping_pass","text":"","code":"mapping_pass(mapping_qc = NULL, sample_info = NULL)"},{"path":"/reference/mapping_pass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep only samples that passed minimum requirements in STAR alignment — mapping_pass","text":"mapping_qc Data frame read mapping statistics, generated multiqc(). sample_info Data frame sample metadata generated create_sample_info.","code":""},{"path":"/reference/mapping_pass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep only samples that passed minimum requirements in STAR alignment — mapping_pass","text":"Data frame metadata samples passed alignment QC.","code":""},{"path":"/reference/mapping_pass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Keep only samples that passed minimum requirements in STAR alignment — mapping_pass","text":"Samples excluded . 50 percent reads fail map, ii. 40 percent reads fail uniquely map.","code":""},{"path":"/reference/mapping_pass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep only samples that passed minimum requirements in STAR alignment — mapping_pass","text":"","code":"data(sample_info) data(mapping_qc) mapping_passed <- mapping_pass(mapping_qc, sample_info)"},{"path":"/reference/mapping_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics of STAR mapping QC — mapping_qc","title":"Summary statistics of STAR mapping QC — mapping_qc","text":"data frame created multiqc. code can found script datasets.R","code":""},{"path":"/reference/mapping_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics of STAR mapping QC — mapping_qc","text":"","code":"data(mapping_qc)"},{"path":"/reference/mapping_qc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Summary statistics of STAR mapping QC — mapping_qc","text":"data frame read mapping QC summary statistics.","code":""},{"path":"/reference/mapping_qc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary statistics of STAR mapping QC — mapping_qc","text":"","code":"data(mapping_qc)"},{"path":"/reference/multiqc_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if multiqc is installed — multiqc_is_installed","title":"Check if multiqc is installed — multiqc_is_installed","text":"Check multiqc installed","code":""},{"path":"/reference/multiqc_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if multiqc is installed — multiqc_is_installed","text":"","code":"multiqc_is_installed()"},{"path":"/reference/multiqc_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if multiqc is installed — multiqc_is_installed","text":"Logical indicating whether MultiQC installed .","code":""},{"path":"/reference/multiqc_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if multiqc is installed — multiqc_is_installed","text":"","code":"multiqc_is_installed() #> [1] FALSE"},{"path":"/reference/remove_rrna.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove rRNA sequences from .fastq files with SortMeRNA — remove_rrna","title":"Remove rRNA sequences from .fastq files with SortMeRNA — remove_rrna","text":"Remove rRNA sequences .fastq files SortMeRNA","code":""},{"path":"/reference/remove_rrna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove rRNA sequences from .fastq files with SortMeRNA — remove_rrna","text":"","code":"remove_rrna(   sample_info,   fastqdir = \"results/01_FASTQ_files\",   filtdir = \"results/03_filtered_FASTQ\",   rrna_db_dir = NULL,   threads = 1 )"},{"path":"/reference/remove_rrna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove rRNA sequences from .fastq files with SortMeRNA — remove_rrna","text":"sample_info Data frame sample metadata created function create_sample_info. fastqdir Path directory .fastq files stored. filtdir Path directory filtered reads stored. Default: results/03_filtered_FASTQ. rrna_db_dir Path directory containing reference rRNA database, must stored FASTA files. threads Number threads SortMeRna. Default: 1.","code":""},{"path":"/reference/remove_rrna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove rRNA sequences from .fastq files with SortMeRNA — remove_rrna","text":"2-column data frame run accessions first column SortMeRNA running status second column, \"OK\" SortMeRNA ran successfully file NA otherwise.","code":""},{"path":"/reference/remove_rrna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove rRNA sequences from .fastq files with SortMeRNA — remove_rrna","text":"","code":"data(sample_info) fastqdir <- system.file(\"extdata\", package=\"bears\") filtdir <- tempdir() rrna_db_dir <- tempdir() rrna_file <- system.file(\"extdata\", \"bac_16s_subset.fa\", package=\"bears\") file.copy(from = rrna_file, to = rrna_db_dir) #> [1] TRUE if(sortmerna_is_installed()) {     remove_rrna(sample_info, fastqdir, filtdir, rrna_db_dir) }"},{"path":"/reference/rseqc_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if RSeQC is installed — rseqc_is_installed","title":"Check if RSeQC is installed — rseqc_is_installed","text":"Check RSeQC installed","code":""},{"path":"/reference/rseqc_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if RSeQC is installed — rseqc_is_installed","text":"","code":"rseqc_is_installed()"},{"path":"/reference/rseqc_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if RSeQC is installed — rseqc_is_installed","text":"Logical indicating whether RSeQC installed ","code":""},{"path":"/reference/rseqc_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if RSeQC is installed — rseqc_is_installed","text":"","code":"rseqc_is_installed() #> [1] TRUE"},{"path":"/reference/salmon2se.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SummarizedExperiment object from salmon output — salmon2se","title":"Create a SummarizedExperiment object from salmon output — salmon2se","text":"Create SummarizedExperiment object salmon output","code":""},{"path":"/reference/salmon2se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SummarizedExperiment object from salmon output — salmon2se","text":"","code":"salmon2se(   sample_info = NULL,   level = \"gene\",   salmondir = \"results/05_quantification/salmon\",   tx2gene = NULL )"},{"path":"/reference/salmon2se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SummarizedExperiment object from salmon output — salmon2se","text":"sample_info Data frame sample metadata created functions create_sample_info level Character indicating level expression must quantified SE object. One \"gene\" (default), \"transcript\", \"\". \"\", SE object two assays named \"transcript\" \"gene\". salmondir Directory quantification files stored. Default: results/05_quantification/salmon. tx2gene Data frame correspondence genes transcripts, gene IDs first column transcript IDs second column. required level = 'gene' ''.","code":""},{"path":"/reference/salmon2se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SummarizedExperiment object from salmon output — salmon2se","text":"SummarizedExperiment object gene/transcript expression levels sample metadata.","code":""},{"path":"/reference/salmon2se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SummarizedExperiment object from salmon output — salmon2se","text":"","code":"data(sample_info) data(tx2gene) salmondir <- system.file(\"extdata\", package=\"bears\") se_gene <- salmon2se(sample_info, salmondir = salmondir, tx2gene = tx2gene) #> reading in files with read.delim (install 'readr' package for speed up) #> 1  #>  #> summarizing abundance #> summarizing counts #> summarizing length"},{"path":"/reference/salmon_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Index the transcriptome for salmon — salmon_index","title":"Index the transcriptome for salmon — salmon_index","text":"Index transcriptome salmon","code":""},{"path":"/reference/salmon_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index the transcriptome for salmon — salmon_index","text":"","code":"salmon_index(   salmonindex = \"results/05_quantification/salmon/idx\",   transcriptome_path = NULL,   klen = 31 )"},{"path":"/reference/salmon_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index the transcriptome for salmon — salmon_index","text":"salmonindex Directory transcriptome index stored. Default: results/05_quantification/salmon/idx. transcriptome_path Path reference transcriptome FASTA file. klen K-mer length. Default: 31.","code":""},{"path":"/reference/salmon_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index the transcriptome for salmon — salmon_index","text":"2-column data frame path index first column index build status second column, \"OK\" transcriptome index successfully created, NA otherwise.","code":""},{"path":"/reference/salmon_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index the transcriptome for salmon — salmon_index","text":"","code":"salmonindex <- tempdir() transcriptome_path <- system.file(      \"extdata\", \"Hsapiens_GRCh37.75_subset_transcripts.fa\", package=\"bears\" ) if(salmon_is_installed()) {     salmon_index(salmonindex, transcriptome_path) }"},{"path":"/reference/salmon_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if salmon is installed — salmon_is_installed","title":"Check if salmon is installed — salmon_is_installed","text":"Check salmon installed","code":""},{"path":"/reference/salmon_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if salmon is installed — salmon_is_installed","text":"","code":"salmon_is_installed()"},{"path":"/reference/salmon_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if salmon is installed — salmon_is_installed","text":"Logical indicating whether salmon installed ","code":""},{"path":"/reference/salmon_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if salmon is installed — salmon_is_installed","text":"","code":"salmon_is_installed() #> [1] FALSE"},{"path":"/reference/salmon_quantify.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantify expression with salmon — salmon_quantify","title":"Quantify expression with salmon — salmon_quantify","text":"Quantify expression salmon","code":""},{"path":"/reference/salmon_quantify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantify expression with salmon — salmon_quantify","text":"","code":"salmon_quantify(   sample_info = NULL,   filtdir = \"results/03_filtered_FASTQ\",   salmonindex = \"results/05_quantification/salmon/idx\",   salmondir = \"results/05_quantification/salmon\",   threads = NULL )"},{"path":"/reference/salmon_quantify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantify expression with salmon — salmon_quantify","text":"sample_info Data frame sample metadata created functions create_sample_info infer_strandedness. function infer_strandedness adds column named \"Orientation\" library strandedness information. column present sample_info, salmon automatically infer library strandedness, take longer run. filtdir Path directory filtered reads stored. Default: results/03_filtered_FASTQ. salmonindex Directory transcriptome index stored. Default: results/05_quantification/salmon/idx. salmondir Directory quantification files stored. Default: results/05_quantification/salmon. threads Number threads salmon quant.","code":""},{"path":"/reference/salmon_quantify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantify expression with salmon — salmon_quantify","text":"2-column data frame BioSample IDs first column salmon quantification status second column, \"OK\" salmon sucessfully quantified expression given BioSample, NA otherwise.","code":""},{"path":"/reference/salmon_quantify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantify expression with salmon — salmon_quantify","text":"","code":"data(sample_info) filtdir <- system.file(\"extdata\", package = \"bears\") salmonindex <- tempdir() salmondir <- tempdir() transcriptome_path <- system.file(      \"extdata\", \"Hsapiens_GRCh37.75_subset_transcripts.fa\", package=\"bears\" ) if(salmon_is_installed()) {     salmon_index(salmonindex, transcriptome_path)     salmon_quantify(sample_info, filtdir, salmonindex, salmondir) }"},{"path":"/reference/sample_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample metadata — sample_info","title":"Sample metadata — sample_info","text":"data frame created create_sample_info, contains metadata associated BioSample SAMN02422669, part data airway package. additional column named \"Orientation\" included infer_strandedness, representing read orientation.","code":""},{"path":"/reference/sample_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample metadata — sample_info","text":"","code":"data(sample_info)"},{"path":"/reference/sample_info.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample metadata — sample_info","text":"data frame sample metadata created create_sample_info infer_strandedness.","code":""},{"path":"/reference/sample_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample metadata — sample_info","text":"","code":"data(sample_info)"},{"path":"/reference/sortmerna_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if SortMeRNA is installed — sortmerna_is_installed","title":"Check if SortMeRNA is installed — sortmerna_is_installed","text":"Check SortMeRNA installed","code":""},{"path":"/reference/sortmerna_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if SortMeRNA is installed — sortmerna_is_installed","text":"","code":"sortmerna_is_installed()"},{"path":"/reference/sortmerna_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if SortMeRNA is installed — sortmerna_is_installed","text":"Logical indicating whether SortMeRNA installed .","code":""},{"path":"/reference/sortmerna_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if SortMeRNA is installed — sortmerna_is_installed","text":"","code":"sortmerna_is_installed() #> [1] FALSE"},{"path":"/reference/star_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Align reads to a reference genome using STAR — star_align","title":"Align reads to a reference genome using STAR — star_align","text":"Align reads reference genome using STAR","code":""},{"path":"/reference/star_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align reads to a reference genome using STAR — star_align","text":"","code":"star_align(   sample_info = NULL,   filtdir = \"results/03_filtered_FASTQ\",   qc_table = NULL,   mappingdir = \"results/04_read_mapping\",   gff_path = NULL,   threads = 1 )"},{"path":"/reference/star_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align reads to a reference genome using STAR — star_align","text":"sample_info Data frame sample metadata created function create_sample_info. filtdir Path directory filtered reads stored. Default: results/03_filtered_FASTQ. qc_table Data frame fastp summary statistics returned summary_stats_fastp(). mappingdir Path directory read mapping files (.bam) stored. gff_path Path .gff/.gtf file annotations. threads Number threads STAR aligner. Default: 1.","code":""},{"path":"/reference/star_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align reads to a reference genome using STAR — star_align","text":"2-column data frame BioSample IDs first column STAR running status second column, \"OK\" reads mapped (.bam files created) NA STAR failed map reads.","code":""},{"path":"/reference/star_align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align reads to a reference genome using STAR — star_align","text":"","code":"# \\donttest{ data(sample_info) qc_table <- summary_stats_fastp(system.file(\"extdata\", package = \"bears\")) genome_path <- system.file(\"extdata\", \"Hsapiens_GRCh37.75_subset.fa\",                              package=\"bears\") gff_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.gtf\",                           package=\"bears\") mappingdir <- tempdir() filtdir <- system.file(\"extdata\", package=\"bears\") if(star_is_installed()) {     star_genome_index(genome_path, gff_path, mapping_dir, indexdir)     star_align(sample_info, filtdir, qc_table, mappingdir, gff_path) } # }"},{"path":"/reference/star_genome_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Index genome for STAR alignment — star_genome_index","title":"Index genome for STAR alignment — star_genome_index","text":"Index genome STAR alignment","code":""},{"path":"/reference/star_genome_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index genome for STAR alignment — star_genome_index","text":"","code":"star_genome_index(   genome_path = NULL,   gff_path = NULL,   mappingdir = \"results/04_read_mapping\",   threads = 2 )"},{"path":"/reference/star_genome_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index genome for STAR alignment — star_genome_index","text":"genome_path Path genome .fasta file. gff_path Path .gff/.gtf file annotations. mappingdir Path directory read mapping files (.bam) stored. threads Number threads STAR aligner. Default: 2.","code":""},{"path":"/reference/star_genome_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index genome for STAR alignment — star_genome_index","text":"2-column data frame path index first column index build status second column, \"OK\" index built successfully NA otherwise.","code":""},{"path":"/reference/star_genome_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index genome for STAR alignment — star_genome_index","text":"","code":"# \\donttest{ genome_path <- system.file(\"extdata\", \"Hsapiens_GRCh37.75_subset.fa\",                              package=\"bears\") gff_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.gtf\",                           package=\"bears\") mappingdir <- tempdir() if(star_is_installed()) {     star_genome_index(genome_path, gff_path, mapping_dir) } # }"},{"path":"/reference/star_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if STAR is installed — star_is_installed","title":"Check if STAR is installed — star_is_installed","text":"Check STAR installed","code":""},{"path":"/reference/star_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if STAR is installed — star_is_installed","text":"","code":"star_is_installed()"},{"path":"/reference/star_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if STAR is installed — star_is_installed","text":"Logical indicating whether STAR installed .","code":""},{"path":"/reference/star_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if STAR is installed — star_is_installed","text":"","code":"star_is_installed() #> [1] FALSE"},{"path":"/reference/stringtie2se.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SummarizedExperiment object from StringTie output — stringtie2se","title":"Create a SummarizedExperiment object from StringTie output — stringtie2se","text":"Create SummarizedExperiment object StringTie output","code":""},{"path":"/reference/stringtie2se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SummarizedExperiment object from StringTie output — stringtie2se","text":"","code":"stringtie2se(   sample_info = NULL,   stringtiedir = \"results/05_quantification/stringtie\",   level = \"gene\",   tx2gene = NULL )"},{"path":"/reference/stringtie2se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SummarizedExperiment object from StringTie output — stringtie2se","text":"sample_info Data frame sample metadata created functions create_sample_info stringtiedir Directory StringTie output files stored. level Character indicating level expression must quantified SE object. One \"gene\" (default), \"transcript\", \"\". \"\", SE object two assays named \"transcript\" \"gene\". tx2gene Data frame correspondence genes transcripts, gene IDs first column transcript IDs second column. required level = 'gene' ''.","code":""},{"path":"/reference/stringtie2se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SummarizedExperiment object from StringTie output — stringtie2se","text":"SummarizedExperiment object gene/transcript expression levels sample metadata.","code":""},{"path":"/reference/stringtie2se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SummarizedExperiment object from StringTie output — stringtie2se","text":"","code":"data(sample_info) qc_table <- summary_stats_fastp(system.file(\"extdata\", package = \"bears\")) data(tx2gene) mappingdir <- system.file(\"extdata\", package=\"bears\") gff_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.gtf\",                         package=\"bears\") stringtiedir <- tempdir() if(stringtie_is_installed()) {     a <- stringtie_quantify(sample_info, qc_table, mappingdir,                              gff_path, stringtiedir)     se_gene <- stringtie2se(sample_info, stringtiedir, tx2gene = tx2gene) }"},{"path":"/reference/stringtie_assemble.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble transcripts with StringTie — stringtie_assemble","title":"Assemble transcripts with StringTie — stringtie_assemble","text":"Assemble transcripts StringTie","code":""},{"path":"/reference/stringtie_assemble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble transcripts with StringTie — stringtie_assemble","text":"","code":"stringtie_assemble(   sample_info = NULL,   qc_table = NULL,   mappingdir = \"results/04_read_mapping\",   gff_path = NULL,   stringtiedir = \"results/05_quantification/stringtie\",   threads = 1 )"},{"path":"/reference/stringtie_assemble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble transcripts with StringTie — stringtie_assemble","text":"sample_info Data frame sample metadata created functions create_sample_info infer_strandedness. function infer_strandedness adds column named \"Orientation\" library strandedness information, mandatory. qc_table Data frame fastp summary statistics returned summary_stats_fastp(). mappingdir Directory .bam files stored. gff_path Path GFF/GTF file annotations. stringtiedir Directory StringTie output files stored. threads Number threads use. Default: 1.","code":""},{"path":"/reference/stringtie_assemble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble transcripts with StringTie — stringtie_assemble","text":"2-column data frame samples first column status second column, \"OK\" transcripts assembled, NA otherwise.","code":""},{"path":"/reference/stringtie_assemble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble transcripts with StringTie — stringtie_assemble","text":"","code":"data(sample_info) qc_table <- summary_stats_fastp(system.file(\"extdata\", package = \"bears\")) mappingdir <- system.file(\"extdata\", package=\"bears\") gff_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.gtf\",                         package=\"bears\") stringtiedir <- tempdir() if(stringtie_is_installed()) {     a <- stringtie_assemble(sample_info, qc_table, mappingdir,                              gff_path, stringtiedir) }"},{"path":"/reference/stringtie_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if StringTie is installed — stringtie_is_installed","title":"Check if StringTie is installed — stringtie_is_installed","text":"Check StringTie installed","code":""},{"path":"/reference/stringtie_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if StringTie is installed — stringtie_is_installed","text":"","code":"stringtie_is_installed()"},{"path":"/reference/stringtie_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if StringTie is installed — stringtie_is_installed","text":"Logical indicating whether StringTie installed ","code":""},{"path":"/reference/stringtie_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if StringTie is installed — stringtie_is_installed","text":"","code":"stringtie_is_installed() #> [1] FALSE"},{"path":"/reference/stringtie_quantify.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantify expression in TPM with StringTie — stringtie_quantify","title":"Quantify expression in TPM with StringTie — stringtie_quantify","text":"Quantify expression TPM StringTie","code":""},{"path":"/reference/stringtie_quantify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantify expression in TPM with StringTie — stringtie_quantify","text":"","code":"stringtie_quantify(   sample_info = NULL,   qc_table = NULL,   mappingdir = \"results/04_read_mapping\",   gff_path = NULL,   stringtiedir = \"results/05_quantification/stringtie\",   threads = 1 )"},{"path":"/reference/stringtie_quantify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantify expression in TPM with StringTie — stringtie_quantify","text":"sample_info Data frame sample metadata created functions create_sample_info infer_strandedness. function infer_strandedness adds column named \"Orientation\" library strandedness information, mandatory. qc_table Data frame fastp summary statistics returned summary_stats_fastp(). mappingdir Directory .bam files stored. gff_path Path GFF/GTF file annotations. stringtiedir Directory StringTie output files stored. threads Number threads use. Default: 1.","code":""},{"path":"/reference/stringtie_quantify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantify expression in TPM with StringTie — stringtie_quantify","text":"2-column data frame samples first column status second column, \"OK\" expression TPM obtained, NA otherwise.","code":""},{"path":"/reference/stringtie_quantify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantify expression in TPM with StringTie — stringtie_quantify","text":"","code":"data(sample_info) qc_table <- summary_stats_fastp(system.file(\"extdata\", package = \"bears\")) mappingdir <- system.file(\"extdata\", package=\"bears\") gff_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.gtf\",                         package=\"bears\") stringtiedir <- tempdir() if(stringtie_is_installed()) {     a <- stringtie_quantify(sample_info, qc_table, mappingdir,                              gff_path, stringtiedir) }"},{"path":"/reference/subread_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if subread is installed — subread_is_installed","title":"Check if subread is installed — subread_is_installed","text":"Check subread installed","code":""},{"path":"/reference/subread_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if subread is installed — subread_is_installed","text":"","code":"subread_is_installed()"},{"path":"/reference/subread_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if subread is installed — subread_is_installed","text":"Logical indicating whether subread installed ","code":""},{"path":"/reference/subread_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if subread is installed — subread_is_installed","text":"","code":"subread_is_installed() #> [1] FALSE"},{"path":"/reference/summary_stats_fastp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get read quality summary statistics from fastp — summary_stats_fastp","title":"Get read quality summary statistics from fastp — summary_stats_fastp","text":"Get read quality summary statistics fastp","code":""},{"path":"/reference/summary_stats_fastp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get read quality summary statistics from fastp — summary_stats_fastp","text":"","code":"summary_stats_fastp(fastp_qcdir = \"results/QC_dir/fastp_stats\")"},{"path":"/reference/summary_stats_fastp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get read quality summary statistics from fastp — summary_stats_fastp","text":"fastp_qcdir Character path directory .json files fastp stored. Default: results/QC_dir/fastp_stats.","code":""},{"path":"/reference/summary_stats_fastp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get read quality summary statistics from fastp — summary_stats_fastp","text":"data frame fastp summary stats sample following variables: Sample sequencing before_nreads before_nbases before_q20bases before_q30bases before_q20rate before_q30rate before_GCcontent before_meanlength after_nreads after_nbases after_q20bases after_q30bases after_q20rate after_q30rate after_GCcontent after_meanlength filter_n_passed filter_n_lowquality filter_n_too_many_N filter_n_tooshort filter_n_toolong duplication_rate","code":""},{"path":"/reference/summary_stats_fastp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get read quality summary statistics from fastp — summary_stats_fastp","text":"","code":"fastp_qcdir <- system.file(\"extdata\", package = \"bears\") fastp_stats <- summary_stats_fastp(fastp_qcdir)"},{"path":"/reference/summary_stats_star.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mapping summary statistics from STAR — summary_stats_star","title":"Get mapping summary statistics from STAR — summary_stats_star","text":"Get mapping summary statistics STAR","code":""},{"path":"/reference/summary_stats_star.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mapping summary statistics from STAR — summary_stats_star","text":"","code":"summary_stats_star(star_dir = \"results/03_read_mapping\")"},{"path":"/reference/summary_stats_star.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mapping summary statistics from STAR — summary_stats_star","text":"star_dir Directory STAR .log files stored. Default: results/03_read_mapping.","code":""},{"path":"/reference/summary_stats_star.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mapping summary statistics from STAR — summary_stats_star","text":"data frame STAR summary stats sample containing following variables (numeric, except Sample): Sample total_reads avg_input_read_length uniquely_mapped uniquely_mapped_percent avg_mapped_read_length num_splices num_annotated_splices num_GTAG_splices num_GCAG_splices num_ATAC_splices num_noncanonical_splices mismatch_rate deletion_rate deletion_length insertion_rate insertion_length multimapped multimapped_percent multimapped_toomany multimapped_toomany_percent unmapped_mismatches_percent unmapped_tooshort_percent unmapped_other_percent unmapped_mismatches unmapped_tooshort unmapped_other","code":""},{"path":"/reference/summary_stats_star.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get mapping summary statistics from STAR — summary_stats_star","text":"","code":"star_dir <- system.file(\"extdata\", package = \"bears\") qc_table <- summary_stats_star(star_dir)"},{"path":"/reference/taco_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if TACO is installed — taco_is_installed","title":"Check if TACO is installed — taco_is_installed","text":"Check TACO installed","code":""},{"path":"/reference/taco_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if TACO is installed — taco_is_installed","text":"","code":"taco_is_installed()"},{"path":"/reference/taco_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if TACO is installed — taco_is_installed","text":"Logical indicating whether TACO installed ","code":""},{"path":"/reference/taco_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if TACO is installed — taco_is_installed","text":"","code":"taco_is_installed() #> [1] FALSE"},{"path":"/reference/taco_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge assembled transcripts with TACO — taco_merge","title":"Merge assembled transcripts with TACO — taco_merge","text":"function merges GFF files StringTie assembly single GFF.","code":""},{"path":"/reference/taco_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge assembled transcripts with TACO — taco_merge","text":"","code":"taco_merge(   sample_info = NULL,   stringtiedir = \"results/05_quantification/stringtie\",   threads = 1 )"},{"path":"/reference/taco_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge assembled transcripts with TACO — taco_merge","text":"sample_info Data frame sample metadata created function create_sample_info. stringtiedir Directory StringTie output files stored. threads Number threads use. Default: 1.","code":""},{"path":"/reference/taco_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge assembled transcripts with TACO — taco_merge","text":"2-column data frame TACO run status, \"OK\" program merged transcripts successfully, NA otherwise.","code":""},{"path":"/reference/taco_merge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge assembled transcripts with TACO — taco_merge","text":"GFF files BioSample first merged BioProject-level GFF files. , Bioproject-level GFF files merged single file represents whole set.","code":""},{"path":"/reference/taco_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge assembled transcripts with TACO — taco_merge","text":"","code":"data(sample_info) qc_table <- summary_stats_fastp(system.file(\"extdata\", package = \"bears\")) mappingdir <- system.file(\"extdata\", package=\"bears\") gff_path <- system.file(\"extdata\", \"Homo_sapiens.GRCh37.75_subset.gtf\",                         package=\"bears\") stringtiedir <- tempdir() if(stringtie_is_installed()) {     a <- stringtie_assemble(sample_info, qc_table, mappingdir,                              gff_path, stringtiedir) } if(taco_is_installed()) {     taco_merge(sample_info, stringtiedir) }"},{"path":"/reference/translate_strandedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate library orientation terminology for each program — translate_strandedness","title":"Translate library orientation terminology for each program — translate_strandedness","text":"Translate library orientation terminology program","code":""},{"path":"/reference/translate_strandedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate library orientation terminology for each program — translate_strandedness","text":"","code":"translate_strandedness(orientation = NULL, layout = NULL)"},{"path":"/reference/translate_strandedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate library orientation terminology for each program — translate_strandedness","text":"orientation Library orientation, available column \"Orientation\" output infer_strandedness. layout Library layout, available column \"Layout\" output create_sample_info.","code":""},{"path":"/reference/translate_strandedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate library orientation terminology for each program — translate_strandedness","text":"list following elements: salmon salmon library information. fcounts featureCounts library information. kallisto kallisto library information. stringtie StringTie library information.","code":""},{"path":"/reference/translate_strandedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate library orientation terminology for each program — translate_strandedness","text":"","code":"data(sample_info) orientation <- sample_info$Orientation layout <- sample_info$Layout strandedness <- translate_strandedness(orientation, layout)"},{"path":"/reference/trim_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim low-quality bases and adapters using fastp — trim_reads","title":"Trim low-quality bases and adapters using fastp — trim_reads","text":"Trim low-quality bases adapters using fastp","code":""},{"path":"/reference/trim_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim low-quality bases and adapters using fastp — trim_reads","text":"","code":"trim_reads(   sample_info = NULL,   fastqdir = \"results/01_FASTQ_files\",   filtdir = \"results/03_filtered_FASTQ\",   qcdir = \"results/QC_dir/fastp_stats\",   threads = 1,   delete_raw = FALSE )"},{"path":"/reference/trim_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim low-quality bases and adapters using fastp — trim_reads","text":"sample_info Data frame sample metadata created function create_sample_info. fastqdir Path directory .fastq files stored. Default: results/01_FASTQ_files. filtdir Path directory filtered .fastq files temporarily stored. trimming, filtered reads moved back fastqdir. Default: results/03_filtered_FASTQ. qcdir Character indicating path directory output summary stats saved. Default: results/QC_dir/fastp_stats. threads Numeric indicating number threads use fastp. Default: 1. delete_raw Logical indicating whether delete raw (unfiltered) FASTQ files QC filtering fastp. recommended delete raw files, use much memory useful information filtered files, even filtering performed. Default: FALSE.","code":""},{"path":"/reference/trim_reads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim low-quality bases and adapters using fastp — trim_reads","text":"2-column data frame run accession first column fastp run status second column, \"OK\" ran successfully NA file run.","code":""},{"path":"/reference/trim_reads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim low-quality bases and adapters using fastp — trim_reads","text":"","code":"data(sample_info) fastqdir <- tempdir() file.copy(system.file(\"extdata\", \"SRR1039508_1.fastq.gz\", package = \"bears\"),           fastqdir) #> [1] FALSE file.copy(system.file(\"extdata\", \"SRR1039508_2.fastq.gz\", package = \"bears\"),           fastqdir) #> [1] FALSE filtdir <- paste0(fastqdir, \"/filtdir\") qcdir <- file.path(tempdir(), \"qcdir\") if(!dir.exists(filtdir)) { dir.create(filtdir, recursive = TRUE) } if(!dir.exists(qcdir)) { dir.create(qcdir, recursive = TRUE) } if(fastp_is_installed()) {     trim_status <- trim_reads(sample_info, fastqdir, filtdir, qcdir) }"},{"path":"/reference/tx2gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcript to gene mapping — tx2gene","title":"Transcript to gene mapping — tx2gene","text":"code used create data frame can found script datasets.R","code":""},{"path":"/reference/tx2gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transcript to gene mapping — tx2gene","text":"","code":"data(tx2gene)"},{"path":"/reference/tx2gene.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transcript to gene mapping — tx2gene","text":"data frame transcript IDs first column gene IDs second column.","code":""},{"path":"/reference/tx2gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transcript to gene mapping — tx2gene","text":"","code":"data(tx2gene)"},{"path":"/news/index.html","id":"bears-0990","dir":"Changelog","previous_headings":"","what":"bears 0.99.0","title":"bears 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package.","code":""}]
